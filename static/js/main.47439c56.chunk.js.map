{"version":3,"sources":["img/About.jpg","components/NavBar.js","components/About.js","components/Academics.js","components/Projects.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","useStyles","makeStyles","theme","appBar","backgroundColor","boxShadow","options","display","grow","flexGrow","button","marginLeft","spacing","titleWrapper","flexDirection","NavBar","_ref","title","classes","react_default","a","createElement","AppBar","className","position","Toolbar","Typography","variant","color","Button","component","Link","to","introWrapper","backgroundImage","concat","Image","minHeight","backgroundSize","backgroundRepeat","alignItems","justifyContent","paddingBottom","mixins","toolbar","height","marginTop","introContent","padding","About","Paper","Academics","Projects","App","react_router_dom","components_NavBar","react_router","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wOCIlCC,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCC,OAAQ,CACNC,gBAAiB,cACjBC,UAAW,QAEbC,QAAS,CACPC,QAAS,QAEXC,KAAM,CACJC,SAAU,GAEZC,OAAQ,CACNC,WAAYT,EAAMU,QAAQ,IAE5BC,aAAc,CACZN,QAAS,OACTO,cAAe,aAkDJC,EA9CA,SAAAC,GAAaA,EAAXC,MAAW,IACpBC,EAAUlB,IAEhB,OACEmB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,UAAWL,EAAQf,OAAQqB,SAAS,UAC1CL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAAA,OAAKE,UAAWL,EAAQL,cACtBM,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,eAAlC,cAGAT,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,eAA/B,qBAKFT,EAAAC,EAAAC,cAAA,OAAKE,UAAWL,EAAQV,OACxBW,EAAAC,EAAAC,cAAA,OAAKE,UAAWL,EAAQZ,SACtBa,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEN,UAAWL,EAAQR,OACnBoB,UAAWC,IACXC,GAAG,KAHL,SAOAb,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEN,UAAWL,EAAQR,OACnBoB,UAAWC,IACXC,GAAG,eAHL,aAOAb,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEN,UAAWL,EAAQR,OACnBoB,UAAWC,IACXC,GAAG,cAHL,0CClDNhC,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrC+B,aAAc,CACZC,gBAAe,OAAAC,OAASC,IAAT,KACfC,UAAW,OACXC,eAAgB,OAChBC,iBAAkB,YAClBhC,QAAS,OACTiC,WAAY,SACZC,eAAgB,SAChBC,cAAexC,EAAMyC,OAAOC,QAAQC,OACpCC,WAAY5C,EAAMyC,OAAOC,QAAQC,QAEnCE,aAAc,CACZC,QAAS9C,EAAMU,QAAQ,OAmBZqC,EAfD,WACZ,IAAM/B,EAAUlB,IAEhB,OACEmB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKE,UAAWL,EAAQe,cACtBd,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAO3B,UAAWL,EAAQ6B,cAA1B,iCCrBOI,EANG,WAChB,OACEhC,EAAAC,EAAAC,cAAA,yBCIW+B,EANE,WACf,OACEjC,EAAAC,EAAAC,cAAA,wBCiBWgC,MAbf,WAEE,OACElC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,KACEnC,EAAAC,EAAAC,cAACkC,EAAD,MAEApC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAAC5B,UAAWmB,IACjC9B,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAOC,KAAK,cAAc3B,UAAWqB,IACrChC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAOC,KAAK,aAAa3B,UAAWsB,MCJtBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.47439c56.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/About.85ba4c24.jpg\";","import React from \"react\";\r\nimport { AppBar, Toolbar, Typography, makeStyles, Button } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  appBar: {\r\n    backgroundColor: 'transparent',\r\n    boxShadow: 'none'\r\n  },\r\n  options: {\r\n    display: \"flex\",\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  button: {\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n  titleWrapper: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  }\r\n}))\r\n\r\nconst NavBar = ({title}) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <AppBar className={classes.appBar} position=\"sticky\">\r\n        <Toolbar>\r\n          <div className={classes.titleWrapper}>\r\n            <Typography variant=\"title\" color=\"textPrimary\">\r\n              Welcome to\r\n            </Typography>\r\n            <Typography variant=\"h5\" color=\"textPrimary\">\r\n              Hanchi's Website\r\n            </Typography>\r\n          </div>\r\n          \r\n          <div className={classes.grow}></div>\r\n          <div className={classes.options}>\r\n            <Button \r\n              className={classes.button}\r\n              component={Link}\r\n              to=\"/\"\r\n            >\r\n              ABOUT\r\n            </Button>\r\n            <Button \r\n              className={classes.button}\r\n              component={Link}\r\n              to=\"/academics/\"\r\n            >\r\n              ACADEMICS\r\n            </Button>\r\n            <Button \r\n              className={classes.button}\r\n              component={Link}\r\n              to=\"/projects/\"\r\n            >\r\n              PROJECTS\r\n            </Button>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NavBar;","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nimport Image from \"../img/About.jpg\";\r\nimport { Paper } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  introWrapper: {\r\n    backgroundImage: `url(${Image})`,\r\n    minHeight: \"60vh\",\r\n    backgroundSize: \"100%\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    paddingBottom: theme.mixins.toolbar.height,\r\n    marginTop: -theme.mixins.toolbar.height\r\n  },\r\n  introContent: {\r\n    padding: theme.spacing(2),\r\n  }\r\n}))\r\n\r\nconst About = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.introWrapper}>\r\n        <Paper className={classes.introContent}>\r\n          Hi, I am Tony Hanchi Zhang\r\n        </Paper>\r\n      </div>\r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default About;","import React from \"react\";\r\n\r\nconst Academics = () => {\r\n  return (\r\n    <div>Academics</div>\r\n  )\r\n}\r\n\r\nexport default Academics;","import React from \"react\";\r\n\r\nconst Projects = () => {\r\n  return (\r\n    <div>Projects</div>\r\n  )\r\n}\r\n\r\nexport default Projects;","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\nimport NavBar from './components/NavBar';\r\nimport About from './components/About';\r\nimport Academics from './components/Academics';\r\nimport Projects from './components/Projects';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <Router>\r\n      <NavBar/>\r\n\r\n      <Route path=\"/\" exact component={About}></Route>\r\n      <Route path=\"/academics/\" component={Academics}></Route>\r\n      <Route path=\"/projects/\" component={Projects}></Route>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}